{"version":3,"file":"static/js/230.d37b8727.chunk.js","mappings":"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SACZxC,SAAU4B,KAEZ/C,EAAAA,EAAAA,KAAA,UACAH,EAAAA,EAAAA,MAAA,UAAQmB,GAAG,OAAOE,MAAOK,EAAYO,KAAMb,KAAK,OAAOE,SAAU4B,EAAahD,SAAA,EAC5EC,EAAAA,EAAAA,KAAA,UAAQkB,MAAM,GAAEnB,SAAC,kCAChBwB,EAAYK,SACXuB,EAAgB5B,EAAYK,SAASkC,KAAKhC,IACxC9B,EAAAA,EAAAA,KAAA,UAAmBkB,MAAOY,EAAK/B,SAC5B+B,GADUA,SAKnB9B,EAAAA,EAAAA,KAAA,UACAH,EAAAA,EAAAA,MAAA,UAAQmB,GAAG,SAASE,MAAOK,EAAYQ,OAAQd,KAAK,SAASE,SAAU4B,EAAahD,SAAA,EAClFC,EAAAA,EAAAA,KAAA,UAAQkB,MAAM,GAAEnB,SAAC,uBAChBwB,EAAYK,SA7LC,CACxBwB,QAAS,CACP,OACA,OACA,aACA,aACA,QACA,iCACA,gBACA,cACA,cACA,iBACA,aACA,0BACA,qBACA,OACA,iBACA,UACA,oBACA,OACA,cACA,UACA,OACA,WACA,YACA,gBACA,YACA,QACA,iBACA,iBACA,aACA,aACA,MACA,UACA,YACA,aACA,QACA,UACA,YACA,aACA,SACA,SACA,YACA,WAEFC,OAAQ,CACN,MACA,QACA,SACA,0BACA,eACA,kBACA,aACA,WACA,YACA,OACA,OACA,UACA,sBACA,WACA,SACA,WACA,oBACA,OACA,aACA,eACA,mBACA,SACA,WACA,QACA,WACA,OACA,eACA,eACA,OACA,gBACA,OACA,UACA,aACA,mBAEFC,OAAQ,CACN,0BACA,YACA,iBACA,UACA,WACA,kBACA,QACA,qBACA,UACA,kBACA,WAEFC,OAAQ,CACN,YACA,wBACA,WACA,UACA,iBACA,YACA,qBACA,cACA,kBACA,gBACA,OACA,kBACA,YACA,UAEFC,QAAS,CACP,yBACA,qBACA,YACA,WACA,kBACA,mBACA,cACA,WACA,eACA,YACA,YACA,oBACA,2BACA,2BACA,gBACA,uBAgE4BjC,EAAYK,SAASkC,KAAK/B,IAC1C/B,EAAAA,EAAAA,KAAA,UAAqBkB,MAAOa,EAAOhC,SAChCgC,GADUA,SAKnB/B,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,SACEe,KAAK,OACLC,GAAG,cACHC,KAAK,cACL0C,YAAY,kBACZxC,SAAU4B,KAEZ/C,EAAAA,EAAAA,KAAA,eAGJA,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,UAC/BC,EAAAA,EAAAA,KAAC+D,EAAAA,SAAQ,CAAC1F,OAAQkE,EAAcxC,UAC9BC,EAAAA,EAAAA,KAACgE,EAAY,CACXhG,cAAeA,EACfC,iBAAkBA,EAClBC,OAAQmE,EACRlE,wBAAyB8E,EACzB7E,mBApVgB0C,IAC1B/B,QAAQC,IAAI,0CAA2C8B,GACvDA,EAAEoC,iBAjDKjE,MAAM,kCAAkCkD,IAAW,CACxDQ,YAAa,UACbzD,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAE2E,YAAa5B,EAAO9B,eAAgBvC,EAAekG,WAAY3C,EAAYP,OAEjGxB,MAAMC,GAAQA,EAAIC,SAClBF,MAAM2E,IACLpF,QAAQC,IAAI,kBAAmBmF,GAC1BA,GAA4B,IAAlBA,EAAOC,QAItBrF,QAAQC,IAAI,YAAamF,EAAO,GAAGnD,IAClBmD,EAAO,GAAGnD,KAJzBjC,QAAQqB,MAAM,iEACP,SAMVyC,OAAOC,IACN/D,QAAQqB,MAAM,gCAAiC0C,GACxC,QA+BFtD,MAAM6E,IACTA,GACFtF,QAAQC,IAAI,mBAAoBqF,GA5BjBA,KACnBpC,EAAUqC,SAASC,IACjBxF,QAAQC,IAAI,iBAAkBuF,GAC9BtF,MAAM,sCAAuC,CAC3C0D,YAAa,UACbzD,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACnBkF,WAAYD,EAAKC,WACjBC,SAAUF,EAAKE,SACfC,MAAOH,EAAKI,cACZN,SAAUA,MAGX7E,MAAMC,GAAQA,EAAIC,SAClBF,MAAMG,IACLZ,QAAQC,IAAI,gDAAoCW,EAAK,IAEtDkD,OAAOC,GAAQ/D,QAAQqB,MAAM,0CAAsC0C,IAAK,GAC3E,EAUE8B,CAAYP,IAEZtF,QAAQqB,MAAM,uCAChB,GACA,YA+UAJ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAM,MACH,C","sources":["Components/UserComponents/CheckoutForm.jsx","Components/UserComponents/CheckoutPage.jsx"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport {CardElement, useStripe, useElements} from \"@stripe/react-stripe-js\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst CheckoutForm= ({paymentMethod, setPaymentMethod, amount, handleBillingInfoSubmit, handleOrderProcess}) => {\r\n\r\nconst stripe = useStripe();\r\nconst elements = useElements();\r\nconst [clientSecret, setClientSecret] = useState();\r\nconst currency = \"usd\";\r\nconst navigate = useNavigate();\r\n\r\nuseEffect (() => {\r\n\r\nif( amount <= 0 || !currency) {\r\nconsole.log(\"Campurile amount si currency sunt obligatorii\")\r\nreturn\r\n};\r\n\r\nfetch(\"https://api.devsite.cfd/create-payment-intent\",{\r\nmethod:\"POST\",\r\nheaders:{\"Content-Type\":\"application/json\"},\r\nbody: JSON.stringify({amount, currency})\r\n})\r\n.then((res) => res.json())\r\n.then((data) => setClientSecret(data.clientSecret))\r\n}, [amount])\r\n\r\n\r\n\r\nconst createPayment = async () => {\r\nif (!elements || !stripe) {\r\nconsole.log(\"Elements sau stripe lipsesc in createPayment\")\r\nreturn\r\n};\r\n\r\nconst {error, paymentIntent} = await stripe.confirmCardPayment(clientSecret, {payment_method:{card: elements.getElement(CardElement)}});\r\n\r\nif(error) {\r\nconsole.error(\"Plata a eșuat:\", error.message);\r\nalert(\"Eroare la plata cu cardul!\")\r\n} else if (\r\npaymentIntent.status === \"succeeded\"\r\n){console.log(\"Plata reusita!\"); alert(\"Plata finalizata cu succes!\"); navigate(\"/succes_payment\") }\r\n};\r\n\r\n\r\nconst CardPayment = () => {\r\n\r\nif (paymentMethod === \"card\") {\r\nreturn (\r\n<div className=\"cardForm-div\">\r\n<CardElement />\r\n<button onClick={()=> {createPayment(); handleBillingInfoSubmit(); handleOrderProcess()}}>Plateste</button>\r\n</div>\r\n)} else if (paymentMethod === \"courier\") {\r\nreturn (\r\n<button onClick={(e)=> {handleBillingInfoSubmit(e); handleOrderProcess(e)}}>Plaseaza comanda</button>\r\n)\r\n}};\r\n\r\n\r\n\r\nreturn (\r\n<div className=\"checkoutForm\">\r\n  <h2>Metode de plata</h2>\r\n\r\n  <div>\r\n   <input type=\"checkbox\" id=\"courier\" name=\"courier\" value=\"courier\" onChange={() =>{setPaymentMethod(\"courier\")}} checked={paymentMethod === \"courier\"} className=\"custom-checkbox\"></input>\r\n   <label htmlFor=\"courier\" className=\"checkbox-label\"> Plata la livrare</label>\r\n  </div>\r\n\r\n  <div>\r\n   <input type=\"checkbox\" id=\"card\" name=\"card\" value=\"card\" onChange={()=>{setPaymentMethod(\"card\")}} checked={paymentMethod === \"card\"} className=\"custom-checkbox\"></input>\r\n   <label htmlFor=\"card\"className=\"checkbox-label\" >Card de debit sau de credit</label>\r\n  </div>\r\n    \r\n  <div className=\"card-payment\">\r\n  <CardPayment />\r\n  </div>\r\n\r\n\r\n\r\n</div>\r\n)\r\n};\r\n\r\nexport default CheckoutForm;","import React, { useEffect, useState } from \"react\";\r\nimport Header from \"./Header.jsx\";\r\nimport Footer from \"./Footer.jsx\";\r\nimport CheckoutForm from \"./CheckoutForm.jsx\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\n\r\nconst CheckOutPage = () => {\r\n  const [billingInfo, setBillingInfo] = useState({\r\n    full_name: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    country: \"\",\r\n    address: \"\",\r\n    city: \"\",\r\n    county: \"\",\r\n    postal_code: \"\",\r\n  });\r\n\r\n  const [cartItems, setCartItems] = useState([]);\r\n  const [user_id, setUser_Id] = useState(null);\r\n  const [total, setTotal] = useState(null);\r\n  const [paymentMethod, setPaymentMethod] = useState();\r\n  const stripePromise = loadStripe(process.env.STRIPE_PUBLIC_KEY);\r\n\r\n  // 1. Asigură-te că obții userId din momentul în care este disponibil\r\n  useEffect(() => {\r\n    fetch(\"https://api.devsite.cfd/auth/user\", { credentials: \"include\" })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setUser_Id(data.user.id);\r\n        console.log(\"Utilizatorul este:\", data.user.id);\r\n      })\r\n      .catch((err) => console.error(\"Eroare la obtinerea utilizatorului\", err));\r\n  }, []);\r\n\r\n  // 2. Obține produsele din coș\r\n  useEffect(() => {\r\n    if (!user_id) return;\r\n    fetch(`https://api.devsite.cfd/cart/data/${user_id}`, { credentials: \"include\" })\r\n      .then((res) => {\r\n        console.log(\"Răspuns server:\", res); // Log pentru răspunsul HTTP\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        console.log(\"Datele din coș:\", data); // Log pentru datele din coș\r\n        setCartItems(data);\r\n      })\r\n      .catch((err) => console.error(\"Eroare la obtinerea produselor din cos\", err));\r\n  }, [user_id]);\r\n\r\n  // 3. Obține totalul coșului\r\n  useEffect(() => {\r\n    if (!user_id) return;\r\n    fetch(`https://api.devsite.cfd/cart/total/${user_id}`, { credentials: \"include\" })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setTotal(data.total);\r\n        console.log(\"Totalul este:\", data.total);\r\n      })\r\n      .catch((err) => console.error(\"Eroare la obtinerea totalului\", err));\r\n  }, [user_id]);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (name === \"country\") {\r\n      setBillingInfo({ ...billingInfo, country: value, city: \"\" });\r\n    } else {\r\n      setBillingInfo({ ...billingInfo, [name]: value });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    console.log(\"Aste e raspunsul e din handleSubmit\" ,e);\r\n    e.preventDefault();\r\n    \r\n    const { full_name, email, phone, country, address, city, county, postal_code } = billingInfo;\r\n\r\n    if (!full_name || !email || !phone || !country || !address || !city || !county || !postal_code) {\r\n      alert(\"Toate câmpurile sunt obligatorii!\"); // Afișează alertă dacă există câmpuri lipsă\r\n      return; // Oprește execuția funcției și nu trimite formularul\r\n    }\r\n   \r\n    console.log(\"Datele de facturare:\", billingInfo); // Log pentru datele de facturare\r\n\r\n    fetch(`https://api.devsite.cfd/billing_info/${user_id}`, {\r\n      credentials: \"include\",\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(billingInfo),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(\"Datele primite in billing_info(front-end):\", data);\r\n        setBillingInfo(data);\r\n      })\r\n      .catch((err) => console.error(\"Eroare la trimiterea datelor de facturare\", err));\r\n  };\r\n\r\n  // Functia de trimitere comenzii\r\n  const orders = () => {\r\n    return fetch(`https://api.devsite.cfd/orders/${user_id}`, {\r\n      credentials: \"include\",\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ total_price: total, payment_method: paymentMethod, billing_id: billingInfo.id }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        console.log(\"Datele primite:\", result);\r\n        if (!result || result.length === 0) {\r\n          console.error(\"⚠️ Eroare: răspunsul API nu conține date!\");\r\n          return null;\r\n        }\r\n        console.log(\"order_id:\", result[0].id); // Accesăm primul obiect din array\r\n        const order_id = result[0].id;\r\n        return order_id;\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"Eroare la trimiterea comenzii\", err);\r\n        return null; // returnează null în caz de eroare\r\n      });\r\n  };\r\n\r\n  // Functia de trimitere produse in comanda\r\n  const order_items = (order_id) => {\r\n    cartItems.forEach((item) => {\r\n      console.log(\"Produs trimis:\", item); // Verifică ce date sunt trimise\r\n      fetch(\"https://api.devsite.cfd/order_items\", {\r\n        credentials: \"include\",\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          product_id: item.product_id,\r\n          quantity: item.quantity,\r\n          price: item.product_price,\r\n          order_id: order_id,\r\n        }),\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          console.log(\"✅ Produs adăugat în order_items:\", data);\r\n        })\r\n        .catch((err) => console.error(\"❌ Eroare la trimiterea produsului:\", err));\r\n    });\r\n  };\r\n\r\n  // Procesul complet al comenzii\r\n  const handleOrderProcess = (e) => {\r\n    console.log(\"Asta e raspunsul din handleOrderProcess\", e);\r\n    e.preventDefault();\r\n    orders().then((order_id) => {\r\n      if (order_id) {\r\n        console.log(\"order_id primit:\", order_id); // Log pentru verificare\r\n        order_items(order_id); // Folosește newOrderId aici\r\n      } else {\r\n        console.error(\"Eroare: newOrderId nu a fost primit!\");\r\n      }\r\n    });\r\n  };\r\n\r\n  const citiesByCountry = {\r\n    Romania: [\r\n      \"București\",\r\n      \"Cluj-Napoca\",\r\n      \"Timișoara\",\r\n      \"Iași\",\r\n      \"Constanța\",\r\n      \"Brașov\",\r\n      \"Craiova\",\r\n      \"Galați\",\r\n      \"Ploiești\",\r\n      \"Oradea\",\r\n      \"Bacău\",\r\n      \"Arad\",\r\n      \"Sibiu\",\r\n      \"Bistrița\",\r\n      \"Brăila\",\r\n      \"Baia Mare\",\r\n      \"Râmnicu Vâlcea\",\r\n      \"Suceava\",\r\n      \"Târgu Mureș\",\r\n      \"Focșani\",\r\n    ],\r\n    Franta: [\r\n      \"Paris\",\r\n      \"Marseille\",\r\n      \"Lyon\",\r\n      \"Toulouse\",\r\n      \"Nice\",\r\n      \"Nantes\",\r\n      \"Strasbourg\",\r\n      \"Montpellier\",\r\n      \"Bordeaux\",\r\n      \"Lille\",\r\n      \"Rennes\",\r\n      \"Reims\",\r\n      \"Le Havre\",\r\n      \"Saint-Étienne\",\r\n      \"Toulon\",\r\n      \"Le Mans\",\r\n      \"Aix-en-Provence\",\r\n      \"Clermont-Ferrand\",\r\n      \"Brest\",\r\n      \"Limoges\",\r\n    ],\r\n    Belgia: [\r\n      \"Bruxelles\",\r\n      \"Antwerpen\",\r\n      \"Ghent\",\r\n      \"Charleroi\",\r\n      \"Liège\",\r\n      \"Brugge\",\r\n      \"Namur\",\r\n      \"Leuven\",\r\n      \"Mons\",\r\n      \"La Louvière\",\r\n      \"Kortrijk\",\r\n      \"Hasselt\",\r\n      \"Mechelen\",\r\n      \"Sint-Niklaas\",\r\n      \"Oostende\",\r\n      \"Aalst\",\r\n      \"Seraing\",\r\n      \"Tournai\",\r\n      \"Genk\",\r\n      \"Beringen\",\r\n    ],\r\n    Suedia: [\r\n      \"Stockholm\",\r\n      \"Gothenburg\",\r\n      \"Malmö\",\r\n      \"Uppsala\",\r\n      \"Västerås\",\r\n      \"Örebro\",\r\n      \"Linköping\",\r\n      \"Helsingborg\",\r\n      \"Jönköping\",\r\n      \"Norrköping\",\r\n      \"Lund\",\r\n      \"Umeå\",\r\n      \"Borås\",\r\n      \"Sundsvall\",\r\n      \"Karlstad\",\r\n      \"Trollhättan\",\r\n      \"Eskilstuna\",\r\n      \"Gävle\",\r\n      \"Växjö\",\r\n      \"Kalmar\",\r\n    ],\r\n    Polonia: [\r\n      \"Warszawa\",\r\n      \"Kraków\",\r\n      \"Łódź\",\r\n      \"Wrocław\",\r\n      \"Poznań\",\r\n      \"Gdańsk\",\r\n      \"Szczecin\",\r\n      \"Bydgoszcz\",\r\n      \"Lublin\",\r\n      \"Białystok\",\r\n      \"Katowice\",\r\n      \"Gdynia\",\r\n      \"Częstochowa\",\r\n      \"Radom\",\r\n      \"Sosnowiec\",\r\n      \"Toruń\",\r\n      \"Kielce\",\r\n      \"Rzeszów\",\r\n      \"Gliwice\",\r\n      \"Zabrze\",\r\n    ],\r\n  };\r\n\r\n  const countiesByCountry = {\r\n    Romania: [\r\n      \"Alba\",\r\n      \"Arad\",\r\n      \"Argeș\",\r\n      \"Bacău\",\r\n      \"Bihor\",\r\n      \"Bistrița-Năsăud\",\r\n      \"Botoșani\",\r\n      \"Brăila\",\r\n      \"Brașov\",\r\n      \"București\",\r\n      \"Buzău\",\r\n      \"Călărași\",\r\n      \"Caraș-Severin\",\r\n      \"Cluj\",\r\n      \"Constanța\",\r\n      \"Covasna\",\r\n      \"Dâmbovița\",\r\n      \"Dolj\",\r\n      \"Galați\",\r\n      \"Giurgiu\",\r\n      \"Gorj\",\r\n      \"Harghita\",\r\n      \"Hunedoara\",\r\n      \"Ialomița\",\r\n      \"Iași\",\r\n      \"Ilfov\",\r\n      \"Maramureș\",\r\n      \"Mehedinți\",\r\n      \"Mureș\",\r\n      \"Neamț\",\r\n      \"Olt\",\r\n      \"Prahova\",\r\n      \"Satu Mare\",\r\n      \"Sălaj\",\r\n      \"Sibiu\",\r\n      \"Suceava\",\r\n      \"Teleorman\",\r\n      \"Timiș\",\r\n      \"Tulcea\",\r\n      \"Vaslui\",\r\n      \"Vâlcea\",\r\n      \"Vrancea\",\r\n    ],\r\n    Franta: [\r\n      \"Ain\",\r\n      \"Aisne\",\r\n      \"Allier\",\r\n      \"Alpes-de-Haute-Provence\",\r\n      \"Hautes-Alpes\",\r\n      \"Alpes-Maritimes\",\r\n      \"Ardèche\",\r\n      \"Ardennes\",\r\n      \"Ariège\",\r\n      \"Aube\",\r\n      \"Aude\",\r\n      \"Aveyron\",\r\n      \"Bouches-du-Rhône\",\r\n      \"Calvados\",\r\n      \"Cantal\",\r\n      \"Charente\",\r\n      \"Charente-Maritime\",\r\n      \"Cher\",\r\n      \"Corrèze\",\r\n      \"Côte-d'Or\",\r\n      \"Côtes-d'Armor\",\r\n      \"Creuse\",\r\n      \"Dordogne\",\r\n      \"Doubs\",\r\n      \"Drôme\",\r\n      \"Eure\",\r\n      \"Eure-et-Loir\",\r\n      \"Finistère\",\r\n      \"Gard\",\r\n      \"Haute-Garonne\",\r\n      \"Gers\",\r\n      \"Gironde\",\r\n      \"Hérault\",\r\n      \"Ille-et-Vilaine\",\r\n    ],\r\n    Belgia: [\r\n      \"Bruxelles-Capitală\",\r\n      \"Antwerpen\",\r\n      \"Flandra de Est\",\r\n      \"Hainaut\",\r\n      \"Liège\",\r\n      \"Flandra de Vest\",\r\n      \"Namur\",\r\n      \"Flandra de Brabant\",\r\n      \"Hainaut\",\r\n      \"Flandra de Vest\",\r\n      \"Limburg\",\r\n    ],\r\n    Suedia: [\r\n      \"Stockholm\",\r\n      \"Västra Götaland\",\r\n      \"Skåne\",\r\n      \"Uppsala\",\r\n      \"Västmanland\",\r\n      \"Örebro\",\r\n      \"Östergötland\",\r\n      \"Helsingborg\",\r\n      \"Jönköping\",\r\n      \"Norrköping\",\r\n      \"Lund\",\r\n      \"Västerbotten\",\r\n      \"Kronoberg\",\r\n      \"Kalmar\",\r\n    ],\r\n    Polonia: [\r\n      \"Dolnośląskie\",\r\n      \"Kujawsko-pomorskie\",\r\n      \"Lubelskie\",\r\n      \"Lubuskie\",\r\n      \"Łódzkie\",\r\n      \"Małopolskie\",\r\n      \"Mazowieckie\",\r\n      \"Opolskie\",\r\n      \"Podkarpackie\",\r\n      \"Podlaskie\",\r\n      \"Pomorskie\",\r\n      \"Śląskie\",\r\n      \"Świętokrzyskie\",\r\n      \"Warmińsko-mazurskie\",\r\n      \"Wielkopolskie\",\r\n      \"Zachodniopomorskie\",\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"CheckOutPage-div\">\r\n      <Header />\r\n      <main>\r\n        <div className=\"billingData-form-div\">\r\n          <form onSubmit={handleSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              id=\"full_name\"\r\n              name=\"full_name\"\r\n              placeholder=\"Nume complet\"\r\n              onChange={handleChange}\r\n            />\r\n            <br />\r\n            <input\r\n              type=\"email\"\r\n              id=\"email\"\r\n              name=\"email\"\r\n              placeholder=\"Email\"\r\n              onChange={handleChange}\r\n            />\r\n            <br />\r\n            <input\r\n              type=\"tel\"\r\n              id=\"phone\"\r\n              name=\"phone\"\r\n              placeholder=\"Telefon\"\r\n              onChange={handleChange}\r\n            />\r\n            <br />\r\n            <select id=\"country\" value={billingInfo.country} name=\"country\" onChange={handleChange}>\r\n              <option  value=\"\">Selecteaza țara</option>\r\n              {Object.keys(citiesByCountry).map((country) => (\r\n                <option  key={country} value={country}>\r\n                  {country}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            <br />\r\n            <input\r\n              type=\"text\"\r\n              id=\"address\"\r\n              name=\"address\"\r\n              placeholder=\"Adresa\"\r\n              onChange={handleChange}\r\n            />\r\n            <br />\r\n            <select id=\"city\" value={billingInfo.city} name=\"city\" onChange={handleChange}>\r\n              <option value=\"\">Selecteaza orasul/localitatea</option>\r\n              {billingInfo.country &&\r\n                citiesByCountry[billingInfo.country].map((city) => (\r\n                  <option key={city} value={city}>\r\n                    {city}\r\n                  </option>\r\n                ))}\r\n            </select>\r\n            <br />\r\n            <select id=\"county\" value={billingInfo.county} name=\"county\" onChange={handleChange}>\r\n              <option value=\"\">Selecteaza judetul</option>\r\n              {billingInfo.country &&\r\n                countiesByCountry[billingInfo.country].map((county) => (\r\n                  <option key={county} value={county}>\r\n                    {county}\r\n                  </option>\r\n                ))}\r\n            </select>\r\n            <br />\r\n            <input\r\n              type=\"text\"\r\n              id=\"postal_code\"\r\n              name=\"postal_code\"\r\n              placeholder=\"Cod poștal\"\r\n              onChange={handleChange}\r\n            />\r\n            <br />\r\n          </form>\r\n        </div>\r\n        <div className=\"checkOutForm-div\">\r\n          <Elements stripe={stripePromise}>\r\n            <CheckoutForm \r\n              paymentMethod={paymentMethod}\r\n              setPaymentMethod={setPaymentMethod}\r\n              amount={total}\r\n              handleBillingInfoSubmit={handleSubmit}\r\n              handleOrderProcess={handleOrderProcess}\r\n            />\r\n          </Elements>\r\n        </div>\r\n      </main>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckOutPage;"],"names":["_ref","paymentMethod","setPaymentMethod","amount","handleBillingInfoSubmit","handleOrderProcess","stripe","useStripe","elements","useElements","clientSecret","setClientSecret","useState","navigate","useNavigate","useEffect","console","log","fetch","method","headers","body","JSON","stringify","currency","then","res","json","data","CardPayment","_jsxs","className","children","_jsx","CardElement","onClick","async","error","paymentIntent","confirmCardPayment","payment_method","card","getElement","message","alert","status","createPayment","e","type","id","name","value","onChange","checked","htmlFor","CheckOutPage","billingInfo","setBillingInfo","full_name","email","phone","country","address","city","county","postal_code","cartItems","setCartItems","user_id","setUser_Id","total","setTotal","stripePromise","loadStripe","process","STRIPE_PUBLIC_KEY","credentials","user","catch","err","handleChange","target","handleSubmit","preventDefault","citiesByCountry","Romania","Franta","Belgia","Suedia","Polonia","Header","onSubmit","placeholder","Object","keys","map","Elements","CheckoutForm","total_price","billing_id","result","length","order_id","forEach","item","product_id","quantity","price","product_price","order_items","Footer"],"sourceRoot":""}
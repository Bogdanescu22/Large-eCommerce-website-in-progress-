{"version":3,"file":"static/js/727.e04428af.chunk.js","mappings":"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","sources":["Components/UserComponents/TelefoanePage.jsx","Components/UserComponents/CardTelefoanePage.jsx"],"sourcesContent":["import React, {useEffect,useState} from \"react\";\r\nimport Header from \"./Header.jsx\";\r\nimport Footer from \"./Footer.jsx\";\r\nimport CardTelefoanePage from \"./CardTelefoanePage.jsx\";\r\n\r\nfunction TelefoanePage () {\r\n\r\nconst[telefoane, setTelefoane]=useState([]);\r\n\r\nuseEffect(()=> {\r\nfetch(\"https://api.devsite.cfd/telefoane-cards\")\r\n.then((res)=>res.json())\r\n.then((data) => {\r\nconsole.log(\"Datele primite:\", data);  \r\nsetTelefoane(data);\r\n})\r\n.catch((err) => console.log(\"Eroare la fetch pt telefoane page\",err))\r\n},[]);\r\n\r\nreturn (\r\n  <div className=\"telefoane-container\">\r\n    <Header />\r\n    <main>\r\n      <div className=\"hero-div-telefoanePage\">\r\n        <div className=\"hero-text-Telefoane\">\r\n          <h1 className=\"hero-title-Telefoane\">Telefoane</h1>\r\n        </div>\r\n      </div>\r\n      <div className=\"product-cards-div\">\r\n        {telefoane.length === 0 ? (\r\n          <p>Se încarcă telefoanele sau nu există produse ...</p>\r\n        ) : (\r\n          telefoane.map((produs) => (\r\n            <CardTelefoanePage\r\n              key={produs.id}\r\n              productId={produs.id}\r\n              imgURL={produs.image_url}\r\n              name={produs.name}\r\n              price={produs.price}\r\n              category={produs.category}\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n    </main>\r\n    <Footer />\r\n  </div>\r\n);\r\n}\r\n\r\nexport default TelefoanePage;","import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\"; // Importăm useNavigate\r\n\r\nfunction CardTelefoanePage({ productId, imgURL, name, price, category }) {\r\n  const [userId, setUserId] = useState(null); // Stocăm userId\r\n  const [cart, setCart] = useState([]); // Stocăm produsele adăugate în coș\r\n  const navigate = useNavigate(); // Inițializăm navigate\r\n\r\n\r\n  // Obținem userId la montarea componentei\r\n  useEffect(() => {\r\n    const getUserId = async () => {\r\n      try {\r\n        const response = await fetch(\"https://api.devsite.cfd/auth/user\", {\r\n          credentials: \"include\",\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\"Eroare la obținerea utilizatorului\");\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        if (data.user) {\r\n          setUserId(data.user.id);\r\n        } else {\r\n          alert(\"Nu ești autentificat\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Eroare:\", error);\r\n      }\r\n    };\r\n\r\n    getUserId();\r\n  }, []);\r\n\r\n  // Funcția de adăugare în coș\r\n  const handleButtonClick = async () => {\r\n    if (!userId) {\r\n      alert(\"Trebuie să fii autentificat pentru a adăuga produse în coș.\");\r\n      return;\r\n    }\r\n\r\n    const newProduct = {\r\n      product_name: name,\r\n      product_price: price,\r\n      product_id: productId,\r\n      product_img: imgURL,\r\n      quantity: 1,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(\"https://api.devsite.cfd/cart\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          user_id: userId,\r\n          product_id: newProduct.product_id,\r\n          product_name: newProduct.product_name,\r\n          product_price: newProduct.product_price,\r\n          product_img: newProduct.product_img,\r\n          quantity: newProduct.quantity,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Eroare la adăugarea produsului în coș\");\r\n      }\r\n\r\n      const result = await response.json();\r\n      setCart((prevCart) => [...prevCart, result.product]); // Actualizăm coșul\r\n      alert(\"Produsul a fost adăugat în coș!\");\r\n    } catch (error) {\r\n      console.error(\"Eroare la adăugarea produsului:\", error);\r\n      alert(\"Eroare la adăugarea produsului în coș\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"phone-card\">\r\n      {/* Înlocuim <Link to={...}> cu navigate() */}\r\n      <img\r\n        className=\"phone-card-image\"\r\n        src={imgURL}\r\n        alt={name}\r\n        onClick={() => navigate(`/products/${name}`)} // Navighează fără refresh\r\n        style={{ cursor: \"pointer\" }} // Schimbăm cursorul la hover\r\n      />\r\n      <h2\r\n        className=\"phone-card-title\"\r\n        onClick={() => navigate(`/${category}/${name}`)}\r\n        style={{ cursor: \"pointer\" }}\r\n      >\r\n        {name}\r\n      </h2>\r\n      <h3 className=\"phone-card-price\">${price}</h3>\r\n      <button className=\"phone-card-button\" onClick={handleButtonClick}>\r\n        Adaugă în coș\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardTelefoanePage;\r\n"],"names":["telefoane","setTelefoane","useState","useEffect","fetch","then","res","json","data","console","log","catch","err","_jsxs","className","children","_jsx","Header","length","map","produs","CardTelefoanePage","productId","id","imgURL","image_url","name","price","category","Footer","_ref","userId","setUserId","cart","setCart","navigate","useNavigate","async","response","credentials","ok","Error","user","alert","error","getUserId","src","alt","onClick","style","cursor","newProduct","product_name","product_price","product_id","product_img","quantity","method","headers","body","JSON","stringify","user_id","result","prevCart","product"],"sourceRoot":""}
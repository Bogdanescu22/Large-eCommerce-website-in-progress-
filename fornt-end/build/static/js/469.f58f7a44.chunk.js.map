{"version":3,"file":"static/js/469.f58f7a44.chunk.js","mappings":"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","sources":["Components/UserComponents/ProductPageHtml.jsx","Components/UserComponents/ProductPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\n\r\nfunction ProductPageHtml({ name_product, image_product, stock_product, product_price, product_details, product_id }) {\r\n  const [starsReviews, setStarsReviews] = useState(0);\r\n  const [description, setDescription] = useState(\"\");\r\n  const [user_id, setUser_Id] = useState(null);\r\n  const [hoveredStars, setHoveredStars] = useState(0);\r\n  const [userProfilePicture, setUserProfilePicture] = useState(null);\r\n  const [verifyOrder, setVerifyOrder] = useState(\"\");\r\n  const [reviewImage, setReviewImage] =useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const getUserId = async () => {\r\n      try {\r\n        const response = await fetch(\"https://api.devsite.cfd/auth/user\", { credentials: \"include\" });\r\n        const data = await response.json();\r\n        if (data.user) {\r\n          setUser_Id(data.user.id);\r\n          setUserProfilePicture(data.user.profile_picture);\r\n        } else {\r\n          alert(\"Nu ești autentificat\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Eroare:\", error);\r\n      }\r\n    };\r\n    getUserId();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!user_id) return;\r\n    fetch(`https://api.devsite.cfd/orders_fetch/${user_id}`, { credentials: \"include\" })\r\n      .then((res) => res.json())\r\n      .then((data) => setVerifyOrder(data))\r\n      .catch((err) => console.log(\"Eroare la obtinerea comenzilor\", err));\r\n  }, [user_id]);\r\n\r\n  const postReview = async () => {\r\n    if (!product_id || !user_id) return alert(\"Nu există user_id sau product_id!\");\r\n    if (!starsReviews || !description) return alert(\"Campurile notă și descriere sunt obligatorii!\");\r\n  \r\n    const verifyBoughtProduct = verifyOrder.some((order) => order.product_name === name_product);\r\n    if (!verifyBoughtProduct) return alert(\"Nu ai cumpărat acest produs!\");\r\n  \r\n    let imageUrl = \"\";\r\n  \r\n    // 1. Uploadează imaginea dacă există\r\n    if (reviewImage) {\r\n      const imageForm = new FormData();\r\n      imageForm.append(\"file\", reviewImage);\r\n  \r\n      try {\r\n        const uploadRes = await fetch(\"https://api.devsite.cfd/upload-image\", {\r\n          method: \"POST\",\r\n          body: imageForm,\r\n        });\r\n        const uploadData = await uploadRes.json();\r\n        imageUrl = uploadData.url; // link-ul de CloudFront\r\n        console.log(imageUrl)\r\n      } catch (error) {\r\n        console.error(\"❌ Eroare la upload imagine:\", error);\r\n        alert(\"Eroare la urcarea imaginii.\");\r\n        return;\r\n      }\r\n    }\r\n  \r\n    // 2. Trimite review-ul + URL imagine\r\n    const reviewForm = new FormData();\r\n    reviewForm.append(\"review_stars\", starsReviews);\r\n    reviewForm.append(\"description\", description);\r\n    reviewForm.append(\"profile_picture\", userProfilePicture || \"\");\r\n    reviewForm.append(\"imageUrl\", imageUrl);\r\n  \r\n    try {\r\n      const res = await fetch(`https://api.devsite.cfd/reviews_approval/${product_id}/${user_id}`, {\r\n        method: \"POST\",\r\n        body: reviewForm,\r\n      });\r\n      if (!res.ok) throw new Error(\"Eroare la adăugarea review-ului\");\r\n      const data = await res.json();\r\n      alert(\"✅ Review trimis cu succes!\");\r\n    } catch (error) {\r\n      console.error(\"❌\", error);\r\n      alert(\"Eroare la trimiterea review-ului.\");\r\n    }\r\n  };\r\n  \r\n\r\n  const handleImageChange = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      setReviewImage(file); // direct fișier, fără FileReader\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className=\"productPage-main\">\r\n        <div className=\"productPage-productTitle\">\r\n          <h1>{name_product}</h1>\r\n        </div>\r\n\r\n        <div className=\"image_cartinfo-div\">\r\n          <div className=\"product-page-image\">\r\n            <img src={image_product} alt={name_product} />\r\n          </div>\r\n\r\n          <div className=\"cartinfo-prodcut-page\">\r\n            <p className={`product-page-stock ${stock_product > 0 ? \"disponibil\" : \"indisponibil\"}`}>\r\n              {stock_product > 0 ? \"In stoc\" : \"Stoc epuizat\"}\r\n            </p>\r\n            <p className=\"product-page-price\">Preț: ${product_price}</p>\r\n            <button className=\"product-page-cart-button\">Adaugă în coș</button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"product-page-details\">\r\n          <h2>Detalii</h2>\r\n          <p>{product_details || \"Nu sunt detalii disponibile.\"}</p>\r\n        </div>\r\n\r\n        <div className=\"product-page-reviews-description-div\">\r\n          <h2>Recenzii</h2>\r\n          <div className=\"product-page-star-reviews-div\">\r\n            <div><h3>Adaugă o notă</h3></div>\r\n            <div>\r\n              {[1, 2, 3, 4, 5].map((star) => (\r\n                <span\r\n                  key={star}\r\n                  onClick={() => setStarsReviews(star)}\r\n                  onMouseEnter={() => setHoveredStars(star)}\r\n                  onMouseLeave={() => setHoveredStars(0)}\r\n                  style={{\r\n                    fontSize: \"24px\",\r\n                    cursor: \"pointer\",\r\n                    color: star <= (hoveredStars || starsReviews) ? \"gold\" : \"grey\",\r\n                  }}\r\n                >\r\n                  ★\r\n                </span>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"product-page-details-div\">\r\n            <textarea\r\n              className={`product-page-input-details-div ${description.length > 500 ? \"active1\" : \"\"}`}\r\n              onChange={(e) => setDescription(e.target.value)}\r\n              placeholder=\"Descrie experiența ta cu produsul\"\r\n            ></textarea>\r\n            <p className={`char-limit-details-div ${description.length > 500 ? \"active\" : \"\"}`}>\r\n              Ai depășit numărul maxim de caractere (500)!\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"product-page-reviews-image-div\">\r\n            <div className=\"product-page-reviews-image-div-text\">\r\n              <p>Adaugă o imagine</p>\r\n            </div>\r\n            <input type=\"file\" onChange={handleImageChange} accept=\"image/*\" />\r\n            {reviewImage && (\r\n              <p style={{ fontSize: \"14px\" }}>Imagine selectată: {reviewImage.name}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"product-page-reviews-button-div\">\r\n            <button onClick={postReview}>Trimite</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ProductPageHtml;\r\n\r\n\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport ProductPageHtml from \"./ProductPageHtml.jsx\";\r\n\r\nconst ProductPage = () => {\r\n  const { name } = useParams();\r\n  const [product, setProduct] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!name) return;\r\n\r\n    fetch(`https://api.devsite.cfd/products/${name}`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(\"Datele primite:\", data);\r\n        setProduct(data);\r\n      })\r\n      .catch((err) => console.log(\"Eroare la obtinerea datelor produsului\", err));\r\n  }, [name]);\r\n\r\n  if (!product) {\r\n    return <h2>Se încarcă produsul...</h2>;\r\n  }\r\n\r\n  return (\r\n    <ProductPageHtml\r\n      key={product.id}\r\n      name_product={product.name}\r\n      image_product={product.image_url}\r\n      stock_product={product.stock}\r\n      product_price={product.price}\r\n      product_details={product.product_details}\r\n      product_id={product.id}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProductPage;"],"names":["_ref","name_product","image_product","stock_product","product_price","product_details","product_id","starsReviews","setStarsReviews","useState","description","setDescription","user_id","setUser_Id","hoveredStars","setHoveredStars","userProfilePicture","setUserProfilePicture","verifyOrder","setVerifyOrder","reviewImage","setReviewImage","useEffect","async","response","fetch","credentials","data","json","user","id","profile_picture","alert","error","console","getUserId","then","res","catch","err","log","_jsxs","_Fragment","children","_jsx","Header","className","src","alt","map","star","onClick","onMouseEnter","onMouseLeave","style","fontSize","cursor","color","length","onChange","e","target","value","placeholder","type","file","files","accept","name","some","order","product_name","imageUrl","imageForm","FormData","append","uploadRes","method","body","url","reviewForm","ok","Error","Footer","ProductPage","useParams","product","setProduct","ProductPageHtml","image_url","stock","price"],"sourceRoot":""}
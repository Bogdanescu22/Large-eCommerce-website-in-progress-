{"version":3,"file":"static/js/138.0b4dd8cc.chunk.js","mappings":"yKAqBA,QAnBA,SAAwBA,GAAwD,IAAvD,OAAEC,EAAM,MAAGC,EAAK,iBAAGC,EAAgB,cAAEC,GAAeJ,EAC3E,OACEK,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACnCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,uBAAsBC,UACnCC,EAAAA,EAAAA,KAAA,OAAKC,IAAKR,EAAQS,IAAKR,OAEzBG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EACpCC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,qBAAoBC,SAAEL,KACpCG,EAAAA,EAAAA,MAAA,KAAGC,UAAU,qBAAoBC,SAAA,CAAC,IAAEH,YAG1CI,EAAAA,EAAAA,KAAA,OAAKF,UAAU,uBAAsBC,UACnCF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,IAAEJ,SAIb,ECuEA,EAvF8BQ,KAE5B,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,CAAC,IAC3BC,EAAQC,IAAaF,EAAAA,EAAAA,UAAS,IA0DrC,OApDAG,EAAAA,EAAAA,YAAU,KACRC,MAAM,oCAAqC,CAAEC,YAAa,YACvDC,MAAMC,IACL,IAAKA,EAAIC,GACP,MAAM,IAAIC,MAAM,2CAElB,OAAOF,EAAIG,MAAM,IAElBJ,MAAKpB,IAAA,IAAC,KAAEY,GAAMZ,EAAA,OAAKa,EAAQD,EAAK,IAChCa,OAAOC,GAAUC,QAAQD,MAAM,UAAWA,IAAO,GACnD,KAGHT,EAAAA,EAAAA,YAAU,KACRU,QAAQC,IAAI,+BAA6BhB,EAAKiB,IACzCjB,EAAKiB,GAKVX,MAAM,wCAAwCN,EAAKiB,KAAM,CAAEV,YAAa,YACrEC,MAAMC,GAAQA,EAAIG,SAClBJ,MAAMU,IACLH,QAAQC,IAAI,oCAAgCE,GAG/C,MAAMC,EAAeD,EAAKE,QAAQ,CAACC,EAAKC,KAClCD,EAAIC,EAAMC,YACbF,EAAIC,EAAMC,UAAW,CACnBA,SAAUD,EAAMC,SAChBC,YAAaF,EAAME,YACnBC,SAAU,KAIbJ,EAAIC,EAAMC,UAAUE,SAASC,KAAK,CAC/BC,WAAYL,EAAMK,WAClBC,aAAcN,EAAMM,aACpBpC,cAAe8B,EAAM9B,cACrBqC,UAAWP,EAAMO,UACjBC,SAAUR,EAAMQ,WAGZT,IACN,CAAC,GAEDjB,EAAU2B,OAAOC,OAAOb,GAAc,IAEvCN,OAAOC,GAAUC,QAAQD,MAAM,UAAWA,KAhC3CC,QAAQC,IAAI,wCAgCsC,GACnD,CAAChB,EAAKiB,MAIPrB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,4BAA2BC,SACvCQ,EAAO8B,KAAKX,IACX7B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2BC,SAAA,EACxCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8BAA6BC,SAAA,EAC1CC,EAAAA,EAAAA,KAAA,OAAAD,UAAKF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,iBAAaC,EAAAA,EAAAA,KAAA,QAAAD,SAAO2B,EAAMC,iBACnC3B,EAAAA,EAAAA,KAAA,OAAKF,UAAU,oCAAmCC,UAACF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,WAAOF,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CAAM,IAAE2B,EAAME,wBAE9E5B,EAAAA,EAAAA,KAAA,OAAKF,UAAU,uBAAsBC,SACpC2B,EAAMG,SAASQ,KAAKC,IACnBtC,EAAAA,EAAAA,KAACuC,EAAe,CAEd9C,OAAQ6C,EAAQL,UAChBvC,MAAO4C,EAAQN,aACfpC,cAAe0C,EAAQ1C,cACvBD,iBAAkB2C,EAAQJ,UAJrBI,EAAQP,kBAR6BL,EAAMC,aAkBpD,EC4EV,QA/JA,SAAqBnC,GAA0C,IAAzC,SAAEgD,EAAQ,OAAEC,EAAM,QAAEC,EAAO,QAAEC,GAASnD,EAC1D,MAAOoD,EAAOC,IAAYvC,EAAAA,EAAAA,UAAS,IAC5BwC,EAAUC,IAAezC,EAAAA,EAAAA,UAAS,CAAE0C,EAAG,EAAGC,EAAG,KAC7CC,IAAW5C,EAAAA,EAAAA,UAAS,CAAE6C,MAAO,IAAKC,OAAQ,IAAKJ,EAAG,GAAIC,EAAG,KAC1DI,GAAWC,EAAAA,EAAAA,QAAO,MAClBC,GAAYD,EAAAA,EAAAA,QAAO,MACnBE,GAAWF,EAAAA,EAAAA,SAAO,GAClBG,GAAWH,EAAAA,EAAAA,QAAO,CAAEN,EAAG,EAAGC,EAAG,IAqC7BS,EAAeA,KACnBF,EAASG,SAAU,CAAK,EA4D1B,OACE9D,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAEhCF,EAAAA,EAAAA,MAAA,OACEC,UAAU,gBACV8D,YArGeC,IACrBA,EAAEC,iBACFN,EAASG,SAAU,EACnBF,EAASE,QAAU,CAAEX,EAAGa,EAAEE,QAASd,EAAGY,EAAEG,QAAS,EAmG3CC,YA/FWJ,IACjB,IAAKL,EAASG,QAAS,OAEvB,MAAMO,EAASL,EAAEE,QAAUN,EAASE,QAAQX,EACtCmB,EAASN,EAAEG,QAAUP,EAASE,QAAQV,EAE5C9B,QAAQC,IAAI,SAAS8C,GACrB/C,QAAQC,IAAI,SAAS+C,GACrBhD,QAAQC,IAAI,UAAUyC,EAAEE,SACxB5C,QAAQC,IAAI,UAAUyC,EAAEG,SACxB7C,QAAQC,IAAI,UAAUqC,EAASE,QAAQX,GACvC7B,QAAQC,IAAI,UAAUqC,EAASE,QAAQV,GAEvCF,GAAaqB,IAAI,CACfpB,EAAGoB,EAAKpB,EAAIkB,EACZjB,EAAGmB,EAAKnB,EAAIkB,MAGdhD,QAAQC,IAAI,YAAY0B,EAASE,GACjC7B,QAAQC,IAAI,YAAY0B,EAASG,GAGjCQ,EAASE,QAAU,CAAEX,EAAGa,EAAEE,QAASd,EAAGY,EAAEG,SACxC7C,QAAQC,IAAI,YAAYqC,EAASE,QAAQ,EAyEnCU,UAAWX,EACXY,aAAcZ,EAAa3D,SAAA,EAE3BC,EAAAA,EAAAA,KAAA,OACEuE,IAAKlB,EACLpD,IAAKuC,EACLtC,IAAI,UACJJ,UAAU,kBACV0E,MAAO,CACLC,UAAW,aAAa3B,EAASE,QAAQF,EAASG,cAAcL,KAChE8B,OAAQ,WAGZ1E,EAAAA,EAAAA,KAAA,OACEF,UAAU,cACV0E,MAAO,CACL1B,SAAU,WACV6B,IAAKzB,EAAQD,EACb2B,KAAM1B,EAAQF,EACdG,MAAOD,EAAQC,MACfC,OAAQF,EAAQE,OAChByB,OAAQ,iBACRC,cAAe,cAMrB9E,EAAAA,EAAAA,KAAA,SACE+E,KAAK,QACLC,IAAI,MACJC,IAAI,IACJC,KAAK,MACLC,MAAOvC,EACPwC,SAAWvB,GAAMhB,EAASwC,OAAOxB,EAAEyB,OAAOH,WAG5CnF,EAAAA,EAAAA,KAAA,UAAQuF,QArGIC,KAChB,MAAMC,EAASlC,EAAUI,QACnB+B,EAAMD,EAAOE,WAAW,MACxBC,EAAMvC,EAASM,QAGrB8B,EAAOtC,MAAQD,EAAQC,MACvBsC,EAAOrC,OAASF,EAAQE,OAIxB,MAAMyC,EAAU/C,EAASE,EACnB8C,EAAUhD,EAASG,EAGnB8C,GAAS7C,EAAQF,EAAI6C,GAAWjD,EAChCoD,GAAS9C,EAAQD,EAAI6C,GAAWlD,EAChCqD,EAAY/C,EAAQC,MACpB+C,EAAahD,EAAQE,OAG3BsC,EAAIS,UACFP,EACAG,EACAC,EACAC,EACAC,EACA,EACA,EACAhD,EAAQC,MACRD,EAAQE,QAGVqC,EAAOW,QAAOC,UACZ,IAAKC,EAAM,OAEX,MAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,kBAAmBH,GAEnC,IACE,MAAMI,QAAiBhG,MAAM,sDAAsDiC,IAAW,CAC5FgE,OAAQ,QACRC,KAAML,EACN5F,YAAa,YAGTW,QAAaoF,EAAS1F,OACxBM,EAAKuF,UACPpE,EAAOnB,EAAKuF,SAEhB,CAAE,MAAO3F,GACPC,QAAQD,MAAM,yCAAkCA,EAClD,IACC,aAAa,EAgDenB,SAAC,mBAC5BC,EAAAA,EAAAA,KAAA,UAAQuF,QAAS7C,EAAQ3C,SAAC,sBAG5BC,EAAAA,EAAAA,KAAA,UAAQuE,IAAKhB,EAAWiB,MAAO,CAAEsC,QAAS,YAGhD,E,aCpBA,QAnIA,WACE,MAAO1G,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,OAC1BC,EAAQC,IAAaF,EAAAA,EAAAA,UAAS,KAC9BY,EAAO6F,IAAYzG,EAAAA,EAAAA,UAAS,OAC5B0G,EAAYC,IAAiB3G,EAAAA,EAAAA,WAAS,IACtC4G,EAAeC,IAAoB7G,EAAAA,EAAAA,UAAS,MAuDnD,OAtDiB8G,EAAAA,EAAAA,OAEjB3G,EAAAA,EAAAA,YAAU,KACJuG,EACFK,SAAST,KAAKU,UAAUC,IAAI,aAE5BF,SAAST,KAAKU,UAAUE,OAAO,YACjC,GACC,CAACR,KAGJvG,EAAAA,EAAAA,YAAU,KACRC,MAAM,oCAAqC,CAAEC,YAAa,YACvDC,MAAMC,GAAQA,EAAIG,SAClBJ,MAAKpB,IAAe,IAAd,KAAEY,GAAMZ,EACba,EAAQD,EAAK,IAEda,OAAOC,IACNC,QAAQD,MAAM,UAAWA,GACzB6F,EAAS,sDAA8C,GACvD,GACH,KAGHtG,EAAAA,EAAAA,YAAU,KACJL,GAAQA,EAAKiB,IACfX,MAAM,wCAAwCN,EAAKiB,KAAM,CAAEV,YAAa,YACrEC,MAAMC,GAAQA,EAAIG,SAClBJ,MAAMU,GAASd,EAAUc,KACzBL,OAAOC,GAAUC,QAAQD,MAAM,UAAWA,IAC/C,GACC,CAACd,IAuBCA,GAKHP,EAAAA,EAAAA,MAAA,OAAKC,UAAW,yBAAwBkH,EAAa,eAAiB,IAAKjH,SAAA,CACxEiH,IACChH,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,UAC3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qCAAoCC,SAAA,EACjDC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,2DACJC,EAAAA,EAAAA,KAAA,UAAQuF,QAASA,IAAM0B,GAAc,GAAOlH,SAAC,UAG/CC,EAAAA,EAAAA,KAAA,SACE+E,KAAK,OACL0C,OAAO,UACPrC,SAAWvB,IACLA,EAAEyB,OAAOoC,MAAM,IACjBP,EAAiBQ,IAAIC,gBAAgB/D,EAAEyB,OAAOoC,MAAM,IACtD,IAIHR,IACClH,EAAAA,EAAAA,KAAC6H,EAAY,CACXlF,QAASvC,EAAKiB,GACdmB,SAAU0E,EACVzE,OAlCMoE,IAClBxG,GAAS+D,IAAI,IAAWA,EAAM0D,gBAAiBjB,MAC/CI,GAAc,EAAM,EAiCRvE,QAASA,IAAMyE,EAAiB,cAO1CnH,EAAAA,EAAAA,KAAC+H,EAAAA,EAAM,KACPlI,EAAAA,EAAAA,MAAA,QAAAE,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mBACJF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACrCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,OACEC,IAAKG,EAAK0H,gBAAkB,0BAA0B1H,EAAK0H,kBAAoB,uBAC/E5H,IAAI,YAENF,EAAAA,EAAAA,KAAA,QAAMuF,QAASA,IAAM0B,GAAc,GAAMlH,SAAC,qBAE5CC,EAAAA,EAAAA,KAAA,UAAQuF,QApESyC,KACpB5H,GAASA,EAAKiB,IACnBX,MAAM,kDAAkDN,EAAKiB,KAAM,CACjEV,YAAa,UACbgG,OAAQ,WAEP/F,MAAMC,GAAQA,EAAIG,SAClBJ,MAAK,KACJP,GAAS+D,IAAI,IAAWA,EAAM0D,gBAAiB,QAAQ,IAExD7G,OAAOC,GAAUC,QAAQD,MAAM,2BAAuBA,IAAO,EA0DpBnB,SAAC,+BAEvCF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,qBAAiBC,EAAAA,EAAAA,KAAA,QAAAD,SAAOK,EAAK6H,kBAChCpI,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,mBAAeC,EAAAA,EAAAA,KAAA,QAAAD,SAAOK,EAAKiB,SAC9BxB,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,YAAQC,EAAAA,EAAAA,KAAA,QAAAD,SAAOK,EAAK8H,SAAW,eAGpClI,EAAAA,EAAAA,KAAA,UAAQuF,QAASA,IAAO4C,OAAOC,SAASC,KAAO,iCAAkCtI,SAAC,WAEjFmB,IAASlB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAeC,SAAEmB,KAE1CrB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,6BAA4BC,SAAA,EACzCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,sBACJC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,2BAA0BC,UACvCC,EAAAA,EAAAA,KAACG,EAAqB,aAI5BH,EAAAA,EAAAA,KAACsI,EAAAA,EAAM,QAjEFtI,EAAAA,EAAAA,KAAA,OAAAD,SAAK,yBAoEhB,C","sources":["Components/UserComponents/CardDetailsPage.jsx","Components/UserComponents/Account-details-card-div.jsx","Components/UserComponents/ImageCropper.jsx","Components/UserComponents/Account-details.jsx"],"sourcesContent":["import React from \"react\";\r\n\r\nfunction CardDetailsPage({ imgURL,  title,  product_quantity, product_price }) {\r\n  return (\r\n    <div className=\"details-card\">\r\n      <div className=\"image-text-details-div\">\r\n          <div className=\"details-card-img-div\">\r\n            <img src={imgURL} alt={title} />\r\n          </div>\r\n          <div className=\"details-card-text-div\">\r\n            <h2 className=\"details-card-title\">{title}</h2>\r\n            <p className=\"details-card-price\">${product_price}</p>\r\n          </div>\r\n      </div>\r\n      <div className=\"quantity-details-div\">\r\n        <p>x{product_quantity}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardDetailsPage;\r\n","import React, {useState, useEffect} from \"react\";\r\nimport CardDetailsPage from \"./CardDetailsPage\";\r\n\r\nconst AccountDetailsCardDiv = () => {\r\n\r\n  const [user, setUser] = useState({}); \r\n  const [orders, setOrders] = useState([]);\r\n  //const [error, setError] = useState(null);  \r\n  //const [products, setProducts] = useState([]);\r\n  //const [orderItems, setOrderItems] = useState([]);\r\n\r\n// Fetch user\r\n  useEffect(() => {\r\n    fetch(\"https://api.devsite.cfd/auth/user\", { credentials: \"include\" })\r\n      .then((res) => {\r\n        if (!res.ok) {\r\n          throw new Error(\"Eroare la obținerea utilizatorului\");\r\n        }\r\n        return res.json();\r\n      })\r\n      .then(({ user }) => setUser(user))\r\n      .catch((error) => console.error(\"Eroare:\", error));\r\n  }, []);\r\n\r\n  // Fetch orders - DEPENDENȚĂ PE user.id\r\n  useEffect(() => {\r\n    console.log(\"User ID înainte de fetch:\", user.id); \r\n    if (!user.id) {\r\n      console.log(\"ID-ul utilizatorului nu este definit.\");\r\n      return;\r\n    }\r\n    \r\n    fetch(`https://api.devsite.cfd/orders_fetch/${user.id}`, { credentials: \"include\" })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(\"Răspuns server orders_fetch:\", data);\r\n  \r\n        // Grupăm comenzile după order_id\r\n     const groupeOrders = data.reduce ((acc, order) => {\r\n       if(!acc[order.order_id]){\r\n        acc[order.order_id] ={\r\n          order_id: order.order_id,\r\n          total_price: order.total_price,\r\n          products: []\r\n        }\r\n       }\r\n\r\n       acc[order.order_id].products.push({\r\n          product_id: order.product_id,\r\n          product_name: order.product_name,\r\n          product_price: order.product_price,\r\n          image_url: order.image_url,\r\n          quantity: order.quantity\r\n       })\r\n\r\n       return acc;\r\n     }, {});\r\n  \r\n        setOrders(Object.values(groupeOrders)); // Convertim obiectul într-un array\r\n      })\r\n      .catch((error) => console.error(\"Eroare:\", error));\r\n  }, [user.id]);\r\n  \r\n\r\n  return (\r\n    <div className=\"account-details-card-div1\">\r\n      {orders.map((order) => (\r\n        <div className=\"account-details-card-div2\" key={order.order_id}>\r\n          <div className=\"account-details-card-div-h2\">\r\n            <div><h2>Id comanda: #<span>{order.order_id}</span></h2></div>\r\n            <div className=\"account-details-card-div-h2-total\"><h2>Total: <span>${order.total_price}</span></h2></div>\r\n          </div>\r\n          <div className=\"account-details-card\">\r\n          {order.products.map((product) => (\r\n            <CardDetailsPage\r\n              key={product.product_id}\r\n              imgURL={product.image_url}\r\n              title={product.product_name}\r\n              product_price={product.product_price}\r\n              product_quantity={product.quantity}\r\n            />\r\n          ))}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n  \r\n};\r\n\r\nexport default AccountDetailsCardDiv;","import React, { useState, useRef, useEffect } from \"react\";\r\n\r\nfunction ImageCropper({ imageSrc, onSave, onClose, user_id }) {\r\n  const [scale, setScale] = useState(1);\r\n  const [position, setPosition] = useState({ x: 0, y: 0 });\r\n  const [cropBox] = useState({ width: 200, height: 200, x: 50, y: 50 });\r\n  const imageRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const dragging = useRef(false);\r\n  const startPos = useRef({ x: 0, y: 0 });\r\n\r\n  // Începe mutarea imaginii\r\n  const startDragging = (e) => {\r\n    e.preventDefault();\r\n    dragging.current = true;\r\n    startPos.current = { x: e.clientX, y: e.clientY };\r\n  };\r\n\r\n  // Muta imaginea\r\n  const dragImage = (e) => {\r\n    if (!dragging.current) return;\r\n\r\n    const deltaX = e.clientX - startPos.current.x;\r\n    const deltaY = e.clientY - startPos.current.y;\r\n\r\n    console.log(\"Deltax\",deltaX);\r\n    console.log(\"Deltay\",deltaY);\r\n    console.log(\"Clientx\",e.clientX);\r\n    console.log(\"Clienty\",e.clientY);\r\n    console.log(\"startx:\",startPos.current.x);\r\n    console.log(\"starty:\",startPos.current.y);\r\n\r\n    setPosition((prev) => ({\r\n      x: prev.x + deltaX,\r\n      y: prev.y + deltaY,\r\n    }));\r\n\r\n    console.log(\"Positionx\",position.x);\r\n    console.log(\"Positiony\",position.y);\r\n\r\n\r\n    startPos.current = { x: e.clientX, y: e.clientY };\r\n    console.log(\"Startpos2\",startPos.current);\r\n  };\r\n\r\n  // Oprește mutarea imaginii\r\n  const stopDragging = () => {\r\n    dragging.current = false;\r\n  };\r\n\r\n  // Salvează imaginea decupată\r\n  const cropImage = () => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    const img = imageRef.current;\r\n\r\n    // Setăm dimensiunile canvas-ului conform cropBox-ului\r\n    canvas.width = cropBox.width;\r\n    canvas.height = cropBox.height;\r\n\r\n    // Calculăm poziția imaginii care va fi decupată\r\n    // Dacă imaginea nu este mutată, poziția ar trebui să fie (0, 0), altfel luăm poziția curentă\r\n    const offsetX = position.x;\r\n    const offsetY = position.y;\r\n\r\n    // Calculăm corect poziția de decupare ținând cont de scalare și offset\r\n    const cropX = (cropBox.x - offsetX) / scale; // Calculăm offset-ul corect pentru X\r\n    const cropY = (cropBox.y - offsetY) / scale; // Calculăm offset-ul corect pentru Y\r\n    const cropWidth = cropBox.width /// scale; // Scalăm lățimea decupajului\r\n    const cropHeight = cropBox.height /// scale; // Scalăm înălțimea decupajului\r\n\r\n    // Desenăm imaginea pe canvas la dimensiunea cropBox-ului\r\n    ctx.drawImage(\r\n      img,\r\n      cropX, // Poziția X a imaginii de decupat (corectă)\r\n      cropY, // Poziția Y a imaginii de decupat (corectă)\r\n      cropWidth, // Lățimea imaginii de decupat\r\n      cropHeight, // Înălțimea imaginii de decupat\r\n      0, // Poziția X pe canvas\r\n      0, // Poziția Y pe canvas\r\n      cropBox.width, // Lățimea pe canvas\r\n      cropBox.height // Înălțimea pe canvas\r\n    );\r\n\r\n    canvas.toBlob(async (blob) => {\r\n      if (!blob) return;\r\n\r\n      const formData = new FormData();\r\n      formData.append(\"profile_picture\", blob);\r\n\r\n      try {\r\n        const response = await fetch(`https://api.devsite.cfd/profile-picture/addPicture/${user_id}`, {\r\n          method: \"PATCH\",\r\n          body: formData,\r\n          credentials: \"include\",\r\n        });\r\n\r\n        const data = await response.json();\r\n        if (data.imageUrl) {\r\n          onSave(data.imageUrl); // Salvează URL-ul imaginii din S3\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Eroare la încărcarea imaginii:\", error);\r\n      }\r\n    }, \"image/webp\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"cropper-overlay\">\r\n      <div className=\"cropper-container\">\r\n        {/* Containerul pentru imagine */}\r\n        <div\r\n          className=\"cropper-frame\"\r\n          onMouseDown={startDragging}\r\n          onMouseMove={dragImage}\r\n          onMouseUp={stopDragging}\r\n          onMouseLeave={stopDragging}\r\n        >\r\n          <img\r\n            ref={imageRef}\r\n            src={imageSrc}\r\n            alt=\"To crop\"\r\n            className=\"croppable-image\"\r\n            style={{\r\n              transform: `translate(${position.x}px, ${position.y}px) scale(${scale})`,\r\n              cursor: \"grab\",\r\n            }}\r\n          />\r\n          <div\r\n            className=\"cropper-box\"\r\n            style={{\r\n              position: \"absolute\",\r\n              top: cropBox.y,\r\n              left: cropBox.x,\r\n              width: cropBox.width,\r\n              height: cropBox.height,\r\n              border: \"2px dashed red\",\r\n              pointerEvents: \"none\", // Evită interacțiunea cu box-ul\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        {/* Slider pentru scalare */}\r\n        <input\r\n          type=\"range\"\r\n          min=\"0.5\"\r\n          max=\"3\"\r\n          step=\"0.1\"\r\n          value={scale}\r\n          onChange={(e) => setScale(Number(e.target.value))}\r\n        />\r\n\r\n        <button onClick={cropImage}>Salvează</button>\r\n        <button onClick={onClose}>Anulează</button>\r\n      </div>\r\n\r\n      <canvas ref={canvasRef} style={{ display: \"none\" }}></canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageCropper;\r\n\r\n\r\n","\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport AccountDetailsCardDiv from \"./Account-details-card-div\";\r\nimport ImageCropper from \"../UserComponents/ImageCropper\";\r\nimport { useNavigate } from \"react-router\";\r\n\r\nfunction AccountDetails() {\r\n  const [user, setUser] = useState(null);  // Inițializează user ca null\r\n  const [orders, setOrders] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [addPicture, setAddPicture] = useState(false);\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (addPicture) {\r\n      document.body.classList.add(\"no-scroll\");\r\n    } else {\r\n      document.body.classList.remove(\"no-scroll\");\r\n    }\r\n  }, [addPicture]);\r\n\r\n  // Fetch user\r\n  useEffect(() => {\r\n    fetch(\"https://api.devsite.cfd/auth/user\", { credentials: \"include\" })\r\n      .then((res) => res.json())\r\n      .then(({ user }) => {\r\n        setUser(user);  // Setează user-ul când datele au fost încărcate\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Eroare:\", error);\r\n        setError(\"Eroare la încărcarea datelor utilizatorului\");\r\n      });\r\n  }, []);\r\n\r\n  // Fetch orders\r\n  useEffect(() => {\r\n    if (user && user.id) {\r\n      fetch(`https://api.devsite.cfd/orders_fetch/${user.id}`, { credentials: \"include\" })\r\n        .then((res) => res.json())\r\n        .then((data) => setOrders(data))\r\n        .catch((error) => console.error(\"Eroare:\", error));\r\n    }\r\n  }, [user]);\r\n\r\n  // Șterge fotografia de profil\r\n  const deleteProfilePhoto = () => {\r\n    if (!user || !user.id) return;  // Verifică dacă user-ul și user.id sunt disponibile\r\n    fetch(`https://api.devsite.cfd/profile-picture/delete/${user.id}`, {\r\n      credentials: \"include\",\r\n      method: \"DELETE\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then(() => {\r\n        setUser((prev) => ({ ...prev, profile_picture: null }));\r\n      })\r\n      .catch((error) => console.error(\"Eroare la ștergere:\", error));\r\n  };\r\n\r\n  // Setează imaginea decupată după salvare\r\n  const handleSave = (imageUrl) => {\r\n    setUser((prev) => ({ ...prev, profile_picture: imageUrl }));\r\n    setAddPicture(false);\r\n  };\r\n\r\n  // Renderizarea componentei\r\n  if (!user) {\r\n    return <div>Se încarcă...</div>;  // Afișează un mesaj de încărcare până când user-ul este disponibil\r\n  }\r\n\r\n  return (\r\n    <div className={`account-details-page ${addPicture ? \"activeChange\" : \"\"}`}>\r\n      {addPicture && (\r\n        <div className=\"blur-overlay\">\r\n          <div className=\"add-picture-div\">\r\n            <div className=\"add-picture-title-close-button-div\">\r\n              <h3>Pozitionați și redimensionați imaginea</h3>\r\n              <button onClick={() => setAddPicture(false)}>X</button>\r\n            </div>\r\n\r\n            <input\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              onChange={(e) => {\r\n                if (e.target.files[0]) {\r\n                  setSelectedImage(URL.createObjectURL(e.target.files[0]));\r\n                }\r\n              }}\r\n            />\r\n\r\n            {selectedImage && (\r\n              <ImageCropper\r\n                user_id={user.id}  // Folosește user.id acum că e definit\r\n                imageSrc={selectedImage}\r\n                onSave={handleSave}\r\n                onClose={() => setSelectedImage(null)}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <Header />\r\n      <main>\r\n        <div className=\"details-div\">\r\n          <h1>Detalii cont:</h1>\r\n          <div className=\"user-profile-photo-div\">\r\n            <div className=\"picture-div\">\r\n              <img\r\n                src={user.profile_picture ? `https://api.devsite.cfd${user.profile_picture}` : \"/default-profile.png\"}\r\n                alt=\"Profil\"\r\n              />\r\n              <span onClick={() => setAddPicture(true)}>✏️</span>\r\n            </div>\r\n            <button onClick={deleteProfilePhoto}>Șterge fotografia</button>\r\n          </div>\r\n          <p>Nume utilizator: <span>{user.displayname}</span></p>\r\n          <p>ID utilizator: <span>{user.id}</span></p>\r\n          <p>Adresa: <span>{user.address || \"N/A\"}</span></p>\r\n        </div>\r\n\r\n        <button onClick={() => (window.location.href = \"https://api.devsite.cfd/logout\")}>Logout</button>\r\n\r\n        {error && <div className=\"error-message\">{error}</div>}\r\n\r\n        <div className=\"details-orders-history-div\">\r\n          <h2>Istoric comenzi:</h2>\r\n          <div className=\"orders-history-cards-div\">\r\n            <AccountDetailsCardDiv />\r\n          </div>\r\n        </div>\r\n      </main>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AccountDetails;\r\n\r\n"],"names":["_ref","imgURL","title","product_quantity","product_price","_jsxs","className","children","_jsx","src","alt","AccountDetailsCardDiv","user","setUser","useState","orders","setOrders","useEffect","fetch","credentials","then","res","ok","Error","json","catch","error","console","log","id","data","groupeOrders","reduce","acc","order","order_id","total_price","products","push","product_id","product_name","image_url","quantity","Object","values","map","product","CardDetailsPage","imageSrc","onSave","onClose","user_id","scale","setScale","position","setPosition","x","y","cropBox","width","height","imageRef","useRef","canvasRef","dragging","startPos","stopDragging","current","onMouseDown","e","preventDefault","clientX","clientY","onMouseMove","deltaX","deltaY","prev","onMouseUp","onMouseLeave","ref","style","transform","cursor","top","left","border","pointerEvents","type","min","max","step","value","onChange","Number","target","onClick","cropImage","canvas","ctx","getContext","img","offsetX","offsetY","cropX","cropY","cropWidth","cropHeight","drawImage","toBlob","async","blob","formData","FormData","append","response","method","body","imageUrl","display","setError","addPicture","setAddPicture","selectedImage","setSelectedImage","useNavigate","document","classList","add","remove","accept","files","URL","createObjectURL","ImageCropper","profile_picture","Header","deleteProfilePhoto","displayname","address","window","location","href","Footer"],"sourceRoot":""}